
Office Notifier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000066  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000029a  2**0
                  ALLOC, LOAD, DATA
  2 .bss          0000000c  00800060  00800060  0000029a  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ae  00000000  00000000  000002f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003f6  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000368  00000000  00000000  0000109d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000111  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000382  00000000  00000000  0000155d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  00000224  00000224  00000298  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001900  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.setled  00000038  000001ec  000001ec  00000260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.easteregg 00000074  00000178  00000178  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000112  00000066  00000066  000000da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.ee       00000002  0080006c  0080006c  0000029a  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c c0       	rjmp	.+24     	; 0x1a <__ctors_end>
   2:	10 c1       	rjmp	.+544    	; 0x224 <__bad_interrupt>
   4:	0f c1       	rjmp	.+542    	; 0x224 <__bad_interrupt>
   6:	0e c1       	rjmp	.+540    	; 0x224 <__bad_interrupt>
   8:	0d c1       	rjmp	.+538    	; 0x224 <__bad_interrupt>
   a:	0c c1       	rjmp	.+536    	; 0x224 <__bad_interrupt>
   c:	0b c1       	rjmp	.+534    	; 0x224 <__bad_interrupt>
   e:	0a c1       	rjmp	.+532    	; 0x224 <__bad_interrupt>
  10:	09 c1       	rjmp	.+530    	; 0x224 <__bad_interrupt>
  12:	08 c1       	rjmp	.+528    	; 0x224 <__bad_interrupt>

00000014 <.dinit>:
  14:	00 60       	ori	r16, 0x00	; 0
  16:	00 6e       	ori	r16, 0xE0	; 224
  18:	80 00       	.word	0x0080	; ????

0000001a <__ctors_end>:
  1a:	11 24       	eor	r1, r1
  1c:	1f be       	out	0x3f, r1	; 63
  1e:	cf e9       	ldi	r28, 0x9F	; 159
  20:	cd bf       	out	0x3d, r28	; 61

00000022 <__do_copy_data>:
  22:	e4 e1       	ldi	r30, 0x14	; 20
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	40 e0       	ldi	r20, 0x00	; 0
  28:	17 c0       	rjmp	.+46     	; 0x58 <__do_clear_bss+0x8>
  2a:	b5 91       	lpm	r27, Z+
  2c:	a5 91       	lpm	r26, Z+
  2e:	35 91       	lpm	r19, Z+
  30:	25 91       	lpm	r18, Z+
  32:	05 91       	lpm	r16, Z+
  34:	07 fd       	sbrc	r16, 7
  36:	0c c0       	rjmp	.+24     	; 0x50 <__do_clear_bss>
  38:	95 91       	lpm	r25, Z+
  3a:	85 91       	lpm	r24, Z+
  3c:	ef 01       	movw	r28, r30
  3e:	f9 2f       	mov	r31, r25
  40:	e8 2f       	mov	r30, r24
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	a2 17       	cp	r26, r18
  48:	b3 07       	cpc	r27, r19
  4a:	d9 f7       	brne	.-10     	; 0x42 <__DATA_REGION_LENGTH__+0x2>
  4c:	fe 01       	movw	r30, r28
  4e:	04 c0       	rjmp	.+8      	; 0x58 <__do_clear_bss+0x8>

00000050 <__do_clear_bss>:
  50:	1d 92       	st	X+, r1
  52:	a2 17       	cp	r26, r18
  54:	b3 07       	cpc	r27, r19
  56:	e1 f7       	brne	.-8      	; 0x50 <__do_clear_bss>
  58:	e9 31       	cpi	r30, 0x19	; 25
  5a:	f4 07       	cpc	r31, r20
  5c:	31 f7       	brne	.-52     	; 0x2a <__do_copy_data+0x8>
  5e:	03 d0       	rcall	.+6      	; 0x66 <_etext>
  60:	00 c0       	rjmp	.+0      	; 0x62 <_exit>

00000062 <_exit>:
  62:	f8 94       	cli

00000064 <__stop_program>:
  64:	ff cf       	rjmp	.-2      	; 0x64 <__stop_program>

Disassembly of section .text:

00000224 <__bad_interrupt>:
 224:	ed ce       	rjmp	.-550    	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setled:

000001ec <setled>:
		}	
	}
}

void setled(){
	switch (state){
 1ec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
 1f0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <state+0x1>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	91 05       	cpc	r25, r1
 1f8:	41 f0       	breq	.+16     	; 0x20a <setled+0x1e>
 1fa:	83 30       	cpi	r24, 0x03	; 3
 1fc:	91 05       	cpc	r25, r1
 1fe:	41 f0       	breq	.+16     	; 0x210 <setled+0x24>
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	49 f4       	brne	.+18     	; 0x216 <setled+0x2a>
		case(1):
		PORTB = 0b00010100;	//Rood
 204:	84 e1       	ldi	r24, 0x14	; 20
 206:	88 bb       	out	0x18, r24	; 24
		break;
 208:	08 95       	ret
					
		case(2):
		PORTB = 0b00010000;	//Oranje
 20a:	80 e1       	ldi	r24, 0x10	; 16
 20c:	88 bb       	out	0x18, r24	; 24
		break;
 20e:	08 95       	ret
					
		case(3):
		PORTB = 0b00011000;	//Groen
 210:	88 e1       	ldi	r24, 0x18	; 24
 212:	88 bb       	out	0x18, r24	; 24
		break;
 214:	08 95       	ret
					
		default:
		state = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <state+0x1>
 21e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <state>
 222:	08 95       	ret

Disassembly of section .text.easteregg:

00000178 <easteregg>:
		break;
	}
}
void easteregg(){
	for(int i = 0; i < 20; i++){
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	33 c0       	rjmp	.+102    	; 0x1e4 <easteregg+0x6c>
		PORTB = 0b00011000;	//Groen
 17e:	28 e1       	ldi	r18, 0x18	; 24
 180:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	e7 ea       	ldi	r30, 0xA7	; 167
 184:	f1 e6       	ldi	r31, 0x61	; 97
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <easteregg+0xe>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <easteregg+0x14>
 18c:	00 00       	nop
		_delay_ms(100);
		PORTB = 0b00010100;	//Rood
 18e:	24 e1       	ldi	r18, 0x14	; 20
 190:	28 bb       	out	0x18, r18	; 24
 192:	e7 ea       	ldi	r30, 0xA7	; 167
 194:	f1 e6       	ldi	r31, 0x61	; 97
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <easteregg+0x1e>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <easteregg+0x24>
 19c:	00 00       	nop
		_delay_ms(100);
		PORTB = 0b00001100;	//Blauw
 19e:	2c e0       	ldi	r18, 0x0C	; 12
 1a0:	28 bb       	out	0x18, r18	; 24
 1a2:	e7 ea       	ldi	r30, 0xA7	; 167
 1a4:	f1 e6       	ldi	r31, 0x61	; 97
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <easteregg+0x2e>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <easteregg+0x34>
 1ac:	00 00       	nop
		_delay_ms(100);
		PORTB = 0b00000100;	//Paars
 1ae:	24 e0       	ldi	r18, 0x04	; 4
 1b0:	28 bb       	out	0x18, r18	; 24
 1b2:	e7 ea       	ldi	r30, 0xA7	; 167
 1b4:	f1 e6       	ldi	r31, 0x61	; 97
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <easteregg+0x3e>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <easteregg+0x44>
 1bc:	00 00       	nop
		_delay_ms(100);
		PORTB = 0b00001000;	//Lichtblauw
 1be:	28 e0       	ldi	r18, 0x08	; 8
 1c0:	28 bb       	out	0x18, r18	; 24
 1c2:	e7 ea       	ldi	r30, 0xA7	; 167
 1c4:	f1 e6       	ldi	r31, 0x61	; 97
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <easteregg+0x4e>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <easteregg+0x54>
 1cc:	00 00       	nop
		_delay_ms(100);
		PORTB = 0b00010000;	//Oranje
 1ce:	20 e1       	ldi	r18, 0x10	; 16
 1d0:	28 bb       	out	0x18, r18	; 24
 1d2:	e7 ea       	ldi	r30, 0xA7	; 167
 1d4:	f1 e6       	ldi	r31, 0x61	; 97
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <easteregg+0x5e>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <easteregg+0x64>
 1dc:	00 00       	nop
		_delay_ms(100);
		PORTB = 0b00011100;	//Uit
 1de:	2c e1       	ldi	r18, 0x1C	; 28
 1e0:	28 bb       	out	0x18, r18	; 24
		state = 1;
		break;
	}
}
void easteregg(){
	for(int i = 0; i < 20; i++){
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	84 31       	cpi	r24, 0x14	; 20
 1e6:	91 05       	cpc	r25, r1
 1e8:	54 f2       	brlt	.-108    	; 0x17e <easteregg+0x6>
		_delay_ms(100);
		PORTB = 0b00010000;	//Oranje
		_delay_ms(100);
		PORTB = 0b00011100;	//Uit
	}
 1ea:	08 95       	ret

Disassembly of section .text.main:

00000066 <main>:

#define 	F_CPU   1000000UL

int main(void)
{
	DDRB = (1<<DDB4)|(1<<DDB3)|(1<<DDB2); //Data Direction Register B
  66:	9c e1       	ldi	r25, 0x1C	; 28
  68:	97 bb       	out	0x17, r25	; 23
	PORTB = 0b00011000;	//Groen
  6a:	88 e1       	ldi	r24, 0x18	; 24
  6c:	88 bb       	out	0x18, r24	; 24
  6e:	2f e9       	ldi	r18, 0x9F	; 159
  70:	36 e8       	ldi	r19, 0x86	; 134
  72:	41 e0       	ldi	r20, 0x01	; 1
  74:	21 50       	subi	r18, 0x01	; 1
  76:	30 40       	sbci	r19, 0x00	; 0
  78:	40 40       	sbci	r20, 0x00	; 0
  7a:	e1 f7       	brne	.-8      	; 0x74 <main+0xe>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <main+0x18>
  7e:	00 00       	nop
	_delay_ms(500);
	PORTB = 0b00010100;	//Rood
  80:	24 e1       	ldi	r18, 0x14	; 20
  82:	28 bb       	out	0x18, r18	; 24
  84:	2f e9       	ldi	r18, 0x9F	; 159
  86:	36 e8       	ldi	r19, 0x86	; 134
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	30 40       	sbci	r19, 0x00	; 0
  8e:	40 40       	sbci	r20, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x24>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x2e>
  94:	00 00       	nop
	_delay_ms(500);
	PORTB = 0b00001100;	//Blauw
  96:	2c e0       	ldi	r18, 0x0C	; 12
  98:	28 bb       	out	0x18, r18	; 24
  9a:	2f e9       	ldi	r18, 0x9F	; 159
  9c:	36 e8       	ldi	r19, 0x86	; 134
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	40 40       	sbci	r20, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <__stack+0x1>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <__stack+0xb>
  aa:	00 00       	nop
	_delay_ms(500);
	PORTB = 0b00011100;	//Uit
  ac:	98 bb       	out	0x18, r25	; 24
  ae:	9f e7       	ldi	r25, 0x7F	; 127
  b0:	2a e1       	ldi	r18, 0x1A	; 26
  b2:	36 e0       	ldi	r19, 0x06	; 6
  b4:	91 50       	subi	r25, 0x01	; 1
  b6:	20 40       	sbci	r18, 0x00	; 0
  b8:	30 40       	sbci	r19, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__stack+0x15>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <__stack+0x1f>
  be:	00 00       	nop
	_delay_ms(2000);
	PORTB = 0b00011000;	//Groen
  c0:	88 bb       	out	0x18, r24	; 24
				
	while(1) 
	{
		if (PINB & (1<<PORTB0) && button_prev == 0){
  c2:	b0 9b       	sbis	0x16, 0	; 22
  c4:	2a c0       	rjmp	.+84     	; 0x11a <__stack+0x7b>
  c6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <button_prev>
  ca:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <button_prev+0x1>
  ce:	89 2b       	or	r24, r25
  d0:	21 f5       	brne	.+72     	; 0x11a <__stack+0x7b>
			
			button_prev = 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <button_prev+0x1>
  da:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <button_prev>
			
				if(state < 3){
  de:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
  e2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <state+0x1>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	91 05       	cpc	r25, r1
  ea:	34 f4       	brge	.+12     	; 0xf8 <__stack+0x59>
					state++;
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <state+0x1>
  f2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <state>
  f6:	06 c0       	rjmp	.+12     	; 0x104 <__stack+0x65>
				}
				else{
					state = 1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <state+0x1>
 100:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <state>
				}
				setled();
 104:	73 d0       	rcall	.+230    	; 0x1ec <setled>
 106:	4f e5       	ldi	r20, 0x5F	; 95
 108:	8a ee       	ldi	r24, 0xEA	; 234
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	41 50       	subi	r20, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <__stack+0x6d>
 114:	00 c0       	rjmp	.+0      	; 0x116 <__stack+0x77>
 116:	00 00       	nop
 118:	d4 cf       	rjmp	.-88     	; 0xc2 <__stack+0x23>
				
			_delay_ms(300);
				
		}
		else if (PINB & (1<<PORTB0) && button_prev == 1){
 11a:	b0 9b       	sbis	0x16, 0	; 22
 11c:	1b c0       	rjmp	.+54     	; 0x154 <__stack+0xb5>
 11e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <button_prev>
 122:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <button_prev+0x1>
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	a9 f4       	brne	.+42     	; 0x154 <__stack+0xb5>
			ee++;
 12a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <_end>
 12e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <_end+0x1>
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <_end+0x1>
 138:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <_end>
			
			if(ee == 1000){
 13c:	88 3e       	cpi	r24, 0xE8	; 232
 13e:	93 40       	sbci	r25, 0x03	; 3
 140:	11 f4       	brne	.+4      	; 0x146 <__stack+0xa7>
				easteregg();
 142:	1a d0       	rcall	.+52     	; 0x178 <easteregg>
				setled();
 144:	53 d0       	rcall	.+166    	; 0x1ec <setled>
 146:	83 ec       	ldi	r24, 0xC3	; 195
 148:	99 e0       	ldi	r25, 0x09	; 9
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <__stack+0xab>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <__stack+0xb1>
 150:	00 00       	nop
 152:	b7 cf       	rjmp	.-146    	; 0xc2 <__stack+0x23>
			}
			
			_delay_ms(10);
		}
		
		else if (!(PINB & (1<<PORTB0)) && button_prev == 1){
 154:	b0 99       	sbic	0x16, 0	; 22
 156:	b5 cf       	rjmp	.-150    	; 0xc2 <__stack+0x23>
 158:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <button_prev>
 15c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <button_prev+0x1>
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	09 f0       	breq	.+2      	; 0x166 <__stack+0xc7>
 164:	ae cf       	rjmp	.-164    	; 0xc2 <__stack+0x23>
			button_prev = 0;
 166:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <button_prev+0x1>
 16a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <button_prev>
			ee = 0;
 16e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <_end+0x1>
 172:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <_end>
 176:	a5 cf       	rjmp	.-182    	; 0xc2 <__stack+0x23>
